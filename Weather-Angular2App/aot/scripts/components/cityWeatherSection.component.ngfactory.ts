/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
 /* tslint:disable */

import * as import0 from '../../../scripts/components/cityWeatherSection.component';
import * as import1 from '@angular/core/src/change_detection/change_detection';
import * as import2 from '@angular/core/src/linker/view';
import * as import3 from '@angular/core/src/linker/view_utils';
import * as import4 from '@angular/core/src/render/api';
import * as import5 from '@angular/core/src/metadata/view';
import * as import6 from '@angular/core/src/linker/view_type';
import * as import7 from '@angular/core/src/linker/component_factory';
import * as import8 from '@ngrx/store/src/store';
import * as import9 from '../../../scripts/actions/WeatherActions';
import * as import10 from '../../../scripts/actions/LoadingActions';
import * as import11 from '../../../scripts/services/WeatherAPI';
import * as import12 from '../../../scripts/services/Logger';
import * as import13 from '../../css/weatherTable.css.shim';
import * as import14 from '../../../scripts/components/cityForm.component';
import * as import15 from './cityForm.component.ngfactory';
import * as import16 from '../../../scripts/components/cityWeatherTable.component';
import * as import17 from './cityWeatherTable.component.ngfactory';
import * as import18 from '@angular/common/src/pipes/async_pipe';
export class Wrapper_CityWeatherSectionComponent {
  /*private*/ _eventHandler:Function;
  context:import0.CityWeatherSectionComponent;
  /*private*/ _changed:boolean;
  /*private*/ _changes:{[key: string]:any};
  /*private*/ _expr_0:any;
  constructor(p0:any,p1:any,p2:any,p3:any,p4:any,p5:any) {
    this._changed = false;
    this._changes = {};
    this.context = new import0.CityWeatherSectionComponent(p0,p1,p2,p3,p4,p5);
    this._expr_0 = import1.UNINITIALIZED;
  }
  ngOnDetach(view:import2.AppView<any>,componentView:import2.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
  }
  check_coordinate(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_0,currValue))) {
      this._changed = true;
      this.context.coordinate = currValue;
      this._changes['coordinate'] = new import1.SimpleChange(this._expr_0,currValue);
      this._expr_0 = currValue;
    }
  }
  ngDoCheck(view:import2.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    if (!throwOnChange) {
      if (changed) {
        this.context.ngOnChanges(this._changes);
        this._changes = {};
      }
      if ((view.numberOfChecks === 0)) { this.context.ngOnInit(); }
    }
    return changed;
  }
  checkHost(view:import2.AppView<any>,componentView:import2.AppView<any>,el:any,throwOnChange:boolean):void {
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import2.AppView<any>,_eventHandler:any):void {
    this._eventHandler = _eventHandler;
  }
}
var renderType_CityWeatherSectionComponent_Host:import4.RenderComponentType = import3.createRenderComponentType('',0,import5.ViewEncapsulation.None,([] as any[]),{});
class View_CityWeatherSectionComponent_Host0 extends import2.AppView<any> {
  _el_0:any;
  compView_0:import2.AppView<import0.CityWeatherSectionComponent>;
  _CityWeatherSectionComponent_0_3:Wrapper_CityWeatherSectionComponent;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_CityWeatherSectionComponent_Host0,renderType_CityWeatherSectionComponent_Host,import6.ViewType.HOST,viewUtils,parentView,parentIndex,parentElement,import1.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import7.ComponentRef<any> {
    this._el_0 = import3.selectOrCreateRenderHostElement(this.renderer,'city-weather-section',import3.EMPTY_INLINE_ARRAY,rootSelector,(null as any));
    this.compView_0 = new View_CityWeatherSectionComponent0(this.viewUtils,this,0,this._el_0);
    this._CityWeatherSectionComponent_0_3 = new Wrapper_CityWeatherSectionComponent(this.compView_0.ref,this.injectorGet(import8.Store,this.parentIndex),this.injectorGet(import9.WeatherActions,this.parentIndex),this.injectorGet(import10.LoadingActions,this.parentIndex),this.injectorGet(import11.WeatherApiService,this.parentIndex),this.injectorGet(import12.LoggerService,this.parentIndex));
    this.compView_0.create(this._CityWeatherSectionComponent_0_3.context);
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),(null as any));
    return new import7.ComponentRef_<any>(0,this,this._el_0,this._CityWeatherSectionComponent_0_3.context);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import0.CityWeatherSectionComponent) && (0 === requestNodeIndex))) { return this._CityWeatherSectionComponent_0_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    if (this._CityWeatherSectionComponent_0_3.ngDoCheck(this,this._el_0,throwOnChange)) { this.compView_0.markAsCheckOnce(); }
    this.compView_0.detectChanges(throwOnChange);
  }
  destroyInternal():void {
    this.compView_0.destroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
}
export const CityWeatherSectionComponentNgFactory:import7.ComponentFactory<import0.CityWeatherSectionComponent> = new import7.ComponentFactory<import0.CityWeatherSectionComponent>('city-weather-section',View_CityWeatherSectionComponent_Host0,import0.CityWeatherSectionComponent);
const styles_CityWeatherSectionComponent:any[] = [import13.styles];
var renderType_CityWeatherSectionComponent:import4.RenderComponentType = import3.createRenderComponentType('',0,import5.ViewEncapsulation.Emulated,styles_CityWeatherSectionComponent,{});
export class View_CityWeatherSectionComponent0 extends import2.AppView<import0.CityWeatherSectionComponent> {
  _el_0:any;
  _text_1:any;
  _el_2:any;
  compView_2:import2.AppView<import14.CityFormComponent>;
  _CityFormComponent_2_3:import15.Wrapper_CityFormComponent;
  _text_3:any;
  _el_4:any;
  compView_4:import2.AppView<import16.CityWeatherTableComponent>;
  _CityWeatherTableComponent_4_3:import17.Wrapper_CityWeatherTableComponent;
  _text_5:any;
  _pipe_async_0:import18.AsyncPipe;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_CityWeatherSectionComponent0,renderType_CityWeatherSectionComponent,import6.ViewType.COMPONENT,viewUtils,parentView,parentIndex,parentElement,import1.ChangeDetectorStatus.CheckOnce);
  }
  createInternal(rootSelector:string):import7.ComponentRef<any> {
    const parentRenderNode:any = this.renderer.createViewRoot(this.parentElement);
    this._el_0 = import3.createRenderElement(this.renderer,parentRenderNode,'div',new import3.InlineArray2(2,'class','user-weather-table'),(null as any));
    this._text_1 = this.renderer.createText(this._el_0,'\n    ',(null as any));
    this._el_2 = import3.createRenderElement(this.renderer,this._el_0,'city-form',import3.EMPTY_INLINE_ARRAY,(null as any));
    this.compView_2 = new import15.View_CityFormComponent0(this.viewUtils,this,2,this._el_2);
    this._CityFormComponent_2_3 = new import15.Wrapper_CityFormComponent();
    this.compView_2.create(this._CityFormComponent_2_3.context);
    this._text_3 = this.renderer.createText(this._el_0,'\n    ',(null as any));
    this._el_4 = import3.createRenderElement(this.renderer,this._el_0,'city-weather-table',import3.EMPTY_INLINE_ARRAY,(null as any));
    this.compView_4 = new import17.View_CityWeatherTableComponent0(this.viewUtils,this,4,this._el_4);
    this._CityWeatherTableComponent_4_3 = new import17.Wrapper_CityWeatherTableComponent();
    this.compView_4.create(this._CityWeatherTableComponent_4_3.context);
    this._text_5 = this.renderer.createText(this._el_0,'\n',(null as any));
    var disposable_0:Function = import3.subscribeToRenderElement(this,this._el_2,new import3.InlineArray2(2,'addNotify',(null as any)),this.eventHandler(this.handleEvent_2));
    this._CityFormComponent_2_3.subscribe(this,this.eventHandler(this.handleEvent_2),true);
    var disposable_1:Function = import3.subscribeToRenderElement(this,this._el_4,new import3.InlineArray4(4,'deleteNotify',(null as any),'selectNotify',(null as any)),this.eventHandler(this.handleEvent_4));
    this._CityWeatherTableComponent_4_3.subscribe(this,this.eventHandler(this.handleEvent_4),true,true);
    this._pipe_async_0 = new import18.AsyncPipe(this.ref);
    this.init((null as any),((<any>this.renderer).directRenderer? (null as any): [
      this._el_0,
      this._text_1,
      this._el_2,
      this._text_3,
      this._el_4,
      this._text_5
    ]
    ),[
      disposable_0,
      disposable_1
    ]
    );
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import14.CityFormComponent) && (2 === requestNodeIndex))) { return this._CityFormComponent_2_3.context; }
    if (((token === import16.CityWeatherTableComponent) && (4 === requestNodeIndex))) { return this._CityWeatherTableComponent_4_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    const valUnwrapper:any = new import1.ValueUnwrapper();
    if (this._CityFormComponent_2_3.ngDoCheck(this,this._el_2,throwOnChange)) { this.compView_2.markAsCheckOnce(); }
    valUnwrapper.reset();
    const currVal_4_0_0:any = valUnwrapper.unwrap(this._pipe_async_0.transform(this.context.weatherListObservable));
    this._CityWeatherTableComponent_4_3.check_weatherList(currVal_4_0_0,throwOnChange,valUnwrapper.hasWrappedValue);
    if (this._CityWeatherTableComponent_4_3.ngDoCheck(this,this._el_4,throwOnChange)) { this.compView_4.markAsCheckOnce(); }
    this.compView_2.detectChanges(throwOnChange);
    this.compView_4.detectChanges(throwOnChange);
  }
  destroyInternal():void {
    this.compView_2.destroy();
    this.compView_4.destroy();
    this._CityFormComponent_2_3.ngOnDestroy();
    this._CityWeatherTableComponent_4_3.ngOnDestroy();
    this._pipe_async_0.ngOnDestroy();
  }
  handleEvent_2(eventName:string,$event:any):boolean {
    this.markPathToRootAsCheckOnce();
    var result:boolean = true;
    if ((eventName == 'addNotify')) {
      const pd_sub_0:any = ((<any>this.context.add($event)) !== false);
      result = (pd_sub_0 && result);
    }
    return result;
  }
  handleEvent_4(eventName:string,$event:any):boolean {
    this.markPathToRootAsCheckOnce();
    var result:boolean = true;
    if ((eventName == 'deleteNotify')) {
      const pd_sub_0:any = ((<any>this.context.remove($event)) !== false);
      result = (pd_sub_0 && result);
    }
    if ((eventName == 'selectNotify')) {
      const pd_sub_1:any = ((<any>this.context.select($event)) !== false);
      result = (pd_sub_1 && result);
    }
    return result;
  }
}