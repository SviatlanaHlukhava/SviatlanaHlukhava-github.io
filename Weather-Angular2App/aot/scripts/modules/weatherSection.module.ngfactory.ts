/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
 /* tslint:disable */

import * as import0 from '@angular/core/src/linker/ng_module_factory';
import * as import1 from '../../../scripts/modules/weatherSection.module';
import * as import2 from '@angular/forms/src/directives';
import * as import3 from '@angular/forms/src/form_providers';
import * as import4 from '@angular/http/src/http_module';
import * as import5 from '@angular/common/src/common_module';
import * as import6 from '../../../scripts/modules/shared.module';
import * as import7 from '@angular/router/src/router_module';
import * as import8 from '../../../scripts/modules/weather.module';
import * as import9 from '@angular/forms/src/directives/radio_control_value_accessor';
import * as import10 from '@angular/http/src/backends/browser_xhr';
import * as import11 from '@angular/http/src/base_response_options';
import * as import12 from '@angular/http/src/backends/xhr_backend';
import * as import13 from '@angular/http/src/base_request_options';
import * as import14 from '@angular/forms/src/form_builder';
import * as import15 from '@angular/common/src/localization';
import * as import16 from '../../../scripts/services/WeatherDTOtoWeatherConverter';
import * as import17 from '../../../scripts/services/WeatherAPI';
import * as import18 from '../../../scripts/actions/WeatherActions';
import * as import19 from '@angular/core/src/di/injector';
import * as import20 from '@angular/core/src/i18n/tokens';
import * as import21 from '@angular/http/src/interfaces';
import * as import22 from '@angular/http/src/http';
class WeatherSectionModuleInjector extends import0.NgModuleInjector<import1.WeatherSectionModule> {
  _InternalFormsSharedModule_0:import2.InternalFormsSharedModule;
  _FormsModule_1:import3.FormsModule;
  _HttpModule_2:import4.HttpModule;
  _ReactiveFormsModule_3:import3.ReactiveFormsModule;
  _CommonModule_4:import5.CommonModule;
  _SharedModule_5:import6.SharedModule;
  _RouterModule_6:import7.RouterModule;
  _WeatherModule_7:import8.WeatherModule;
  _WeatherSectionModule_8:import1.WeatherSectionModule;
  __RadioControlRegistry_9:import9.RadioControlRegistry;
  __BrowserXhr_10:import10.BrowserXhr;
  __ResponseOptions_11:import11.BaseResponseOptions;
  __XSRFStrategy_12:any;
  __XHRBackend_13:import12.XHRBackend;
  __RequestOptions_14:import13.BaseRequestOptions;
  __Http_15:any;
  __FormBuilder_16:import14.FormBuilder;
  __NgLocalization_17:import15.NgLocaleLocalization;
  __WeatherDTOtoWeatherConverter_18:import16.WeatherDTOtoWeatherConverter;
  __WeatherApiService_19:import17.WeatherApiService;
  __WeatherActions_20:import18.WeatherActions;
  constructor(parent:import19.Injector) {
    super(parent,([] as any[]),([] as any[]));
  }
  get _RadioControlRegistry_9():import9.RadioControlRegistry {
    if ((this.__RadioControlRegistry_9 == null)) { (this.__RadioControlRegistry_9 = new import9.RadioControlRegistry()); }
    return this.__RadioControlRegistry_9;
  }
  get _BrowserXhr_10():import10.BrowserXhr {
    if ((this.__BrowserXhr_10 == null)) { (this.__BrowserXhr_10 = new import10.BrowserXhr()); }
    return this.__BrowserXhr_10;
  }
  get _ResponseOptions_11():import11.BaseResponseOptions {
    if ((this.__ResponseOptions_11 == null)) { (this.__ResponseOptions_11 = new import11.BaseResponseOptions()); }
    return this.__ResponseOptions_11;
  }
  get _XSRFStrategy_12():any {
    if ((this.__XSRFStrategy_12 == null)) { (this.__XSRFStrategy_12 = import4._createDefaultCookieXSRFStrategy()); }
    return this.__XSRFStrategy_12;
  }
  get _XHRBackend_13():import12.XHRBackend {
    if ((this.__XHRBackend_13 == null)) { (this.__XHRBackend_13 = new import12.XHRBackend(this._BrowserXhr_10,this._ResponseOptions_11,this._XSRFStrategy_12)); }
    return this.__XHRBackend_13;
  }
  get _RequestOptions_14():import13.BaseRequestOptions {
    if ((this.__RequestOptions_14 == null)) { (this.__RequestOptions_14 = new import13.BaseRequestOptions()); }
    return this.__RequestOptions_14;
  }
  get _Http_15():any {
    if ((this.__Http_15 == null)) { (this.__Http_15 = import4.httpFactory(this._XHRBackend_13,this._RequestOptions_14)); }
    return this.__Http_15;
  }
  get _FormBuilder_16():import14.FormBuilder {
    if ((this.__FormBuilder_16 == null)) { (this.__FormBuilder_16 = new import14.FormBuilder()); }
    return this.__FormBuilder_16;
  }
  get _NgLocalization_17():import15.NgLocaleLocalization {
    if ((this.__NgLocalization_17 == null)) { (this.__NgLocalization_17 = new import15.NgLocaleLocalization(this.parent.get(import20.LOCALE_ID))); }
    return this.__NgLocalization_17;
  }
  get _WeatherDTOtoWeatherConverter_18():import16.WeatherDTOtoWeatherConverter {
    if ((this.__WeatherDTOtoWeatherConverter_18 == null)) { (this.__WeatherDTOtoWeatherConverter_18 = new import16.WeatherDTOtoWeatherConverter()); }
    return this.__WeatherDTOtoWeatherConverter_18;
  }
  get _WeatherApiService_19():import17.WeatherApiService {
    if ((this.__WeatherApiService_19 == null)) { (this.__WeatherApiService_19 = new import17.WeatherApiService(this._WeatherDTOtoWeatherConverter_18,this._Http_15)); }
    return this.__WeatherApiService_19;
  }
  get _WeatherActions_20():import18.WeatherActions {
    if ((this.__WeatherActions_20 == null)) { (this.__WeatherActions_20 = new import18.WeatherActions()); }
    return this.__WeatherActions_20;
  }
  createInternal():import1.WeatherSectionModule {
    this._InternalFormsSharedModule_0 = new import2.InternalFormsSharedModule();
    this._FormsModule_1 = new import3.FormsModule();
    this._HttpModule_2 = new import4.HttpModule();
    this._ReactiveFormsModule_3 = new import3.ReactiveFormsModule();
    this._CommonModule_4 = new import5.CommonModule();
    this._SharedModule_5 = new import6.SharedModule();
    this._RouterModule_6 = new import7.RouterModule(this.parent.get(import7.ROUTER_FORROOT_GUARD,(null as any)));
    this._WeatherModule_7 = new import8.WeatherModule();
    this._WeatherSectionModule_8 = new import1.WeatherSectionModule();
    return this._WeatherSectionModule_8;
  }
  getInternal(token:any,notFoundResult:any):any {
    if ((token === import2.InternalFormsSharedModule)) { return this._InternalFormsSharedModule_0; }
    if ((token === import3.FormsModule)) { return this._FormsModule_1; }
    if ((token === import4.HttpModule)) { return this._HttpModule_2; }
    if ((token === import3.ReactiveFormsModule)) { return this._ReactiveFormsModule_3; }
    if ((token === import5.CommonModule)) { return this._CommonModule_4; }
    if ((token === import6.SharedModule)) { return this._SharedModule_5; }
    if ((token === import7.RouterModule)) { return this._RouterModule_6; }
    if ((token === import8.WeatherModule)) { return this._WeatherModule_7; }
    if ((token === import1.WeatherSectionModule)) { return this._WeatherSectionModule_8; }
    if ((token === import9.RadioControlRegistry)) { return this._RadioControlRegistry_9; }
    if ((token === import10.BrowserXhr)) { return this._BrowserXhr_10; }
    if ((token === import11.ResponseOptions)) { return this._ResponseOptions_11; }
    if ((token === import21.XSRFStrategy)) { return this._XSRFStrategy_12; }
    if ((token === import12.XHRBackend)) { return this._XHRBackend_13; }
    if ((token === import13.RequestOptions)) { return this._RequestOptions_14; }
    if ((token === import22.Http)) { return this._Http_15; }
    if ((token === import14.FormBuilder)) { return this._FormBuilder_16; }
    if ((token === import15.NgLocalization)) { return this._NgLocalization_17; }
    if ((token === import16.WeatherDTOtoWeatherConverter)) { return this._WeatherDTOtoWeatherConverter_18; }
    if ((token === import17.WeatherApiService)) { return this._WeatherApiService_19; }
    if ((token === import18.WeatherActions)) { return this._WeatherActions_20; }
    return notFoundResult;
  }
  destroyInternal():void {
  }
}
export const WeatherSectionModuleNgFactory:import0.NgModuleFactory<import1.WeatherSectionModule> = new import0.NgModuleFactory(WeatherSectionModuleInjector,import1.WeatherSectionModule);